const rootLayout = `import type { Metadata } from "next";
import { Toaster } from "sonner";
import "./globals.css";
import { cookies } from "next/headers";
import { getServerSession } from "next-auth";
import { simplcms, SiteProvider, AdminToolbar, Navigation } from "simplcms";
import { User } from "simplcms/types";
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const platformConfiguration = simplcms.platform.getPlatformConfiguration();
  const cookieStore = await cookies();
  const darkModeCookie = cookieStore.get("darkMode");
  const darkMode = darkModeCookie?.value === "true";
  let user: User | null = null;
  if (platformConfiguration.database && platformConfiguration.oauth) {
    const session = await getServerSession();
    if (session?.user?.email) {
      user = await simplcms.users.getUserByEmail(session.user.email);
    }
  }

  return (
    <html lang="en" className={darkMode ? "dark" : ""}>
      <body className="h-screen w-screen overflow-hidden bg-simplcms-background">
        <SiteProvider initialSettings={{ darkMode }}>
          <div className="z-50 fixed w-screen top-0">
            <AdminToolbar user={user} />
            <Navigation />
          </div>
          {children}
          <Toaster
            toastOptions={{
              unstyled: true,
              classNames: {
                toast:
                  "bg-simplcms-background border p-4 dark:border-dark text-simplcms-foreground rounded-md flex gap-2 items-center text-sm w-[23rem]",
                title: "text-simplcms-foreground font-normal",
                description: "text-simplcms-foreground font-normal",
              },
            }}
          />
        </SiteProvider>
      </body>
    </html>
  );
}`

const homePage =`import { simplcms, PageRenderer, TooltipProvider } from "simplcms";
import { Page } from "simplcms/types";

export default async function Home() {
  const platformConfiguration = simplcms.platform.getPlatformConfiguration();
  let pageConfig: Page = simplcms.defaultHomePageConfig;
  if (platformConfiguration.database) {
    const page = await simplcms.pages.getPageByRoute("/");
    if (page) {
      pageConfig = page;
    }
  }

  return (
    <TooltipProvider>
      <div className="size-full flex justify-center items-center overflow-hidden font-[family-name:var(--font-geist-sans)] pt-20">
        <div className="size-full absolute top-0 left-0 z-0 bg-[linear-gradient(215deg,rgba(0,0,0,0.25)_0%,transparent_40%)] bg-simplcms-background dark:bg-[linear-gradient(215deg,rgba(255,255,255,0.1)_0%,transparent_40%)]" />
        <main className="flex gap-4 items-center flex-col z-50 text-simplcms-foreground">
          <PageRenderer page={pageConfig} />
        </main>
      </div>
    </TooltipProvider>
  );
}`

const blogPage = `import { PostList } from "simplcms";
export default async function BlogPage() {
  return (
    <div className="container mx-auto max-w-5xl pt-20 px-6">
      <PostList />
    </div>
  );
}
`

const slugPage = `import Link from "next/link";
import { notFound } from "next/navigation";
import { MarkdownRenderer, simplcms } from "simplcms";

export async function generateStaticParams() {
  const platformConfiguration = simplcms.platform.getPlatformConfiguration();
  if (platformConfiguration.database) {
    const allPosts = await simplcms.posts.getAllPosts();
    return allPosts.map((post) => ({
      slug: post.slug.replace(/\.md$/, ""),
    }));
  } else {
    return [];
  }
}

import type { Metadata } from "next";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug: string }>;
}): Promise<Metadata> {
  const { slug } = await params;

  const post = await simplcms.posts.getPostBySlug(slug);
  if (!post) {
    return { title: "SimplCMS | Blog" };
  }

  const metadata: Metadata = {
    title: \`SimplCMS | \${post.title}\`,
    description: post.subtitle,
    openGraph: {
      title: \`SimplCMS | \${post.title}\`,
      description: post.metadata.description ?? post.subtitle ?? "",
    },
  };

  if (post.metadata.ogImage) {
    metadata.openGraph = {
      ...metadata.openGraph,
      images: [
        {
          url: post.metadata.ogImage,
          width: 1200,
          height: 630,
          alt: post.title || "Blog post image",
        },
      ],
    };
  }

  return metadata;
}

function formatDate(date: Date | string): string {
  const d = new Date(date);
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  return \`\${months[d.getMonth()]} \${d.getDate()}, \${d.getFullYear()}\`;
}

export default async function BlogPost({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const { slug } = await params;

  const post = await simplcms.posts.getPostBySlug(slug);

  if (!post) {
    return notFound();
  }

  return (
    <div className="size-full flex min-h-screen justify-center pb-20 bg-simplcms-background text-simplcms-foreground pt-20 overflow-auto">
      <div
        id="blog"
        className="flex flex-col items-start max-w-5xl w-full p-4 gap-4"
      >
        <div className="text-zinc-500">
          <Link className="hover:underline text-simplcms-foreground" href="/blog">
            Blog
          </Link>
          <span className="cursor-default"> / </span>
          <Link
            className="hover:underline text-simplcms-foreground"
            href={\`/blog/\${slug}\`}
          >
            {post.title}
          </Link>
        </div>

        <div className="flex flex-col gap-2">
          <h1 className="text-4xl font-bold">{post.title}</h1>
          <div className="flex gap-2 text-nowrap text-zinc-500">
            <p>{formatDate(post.createdAt)}</p>
            {post.author && <p>by {post.author}</p>}
          </div>
        </div>
        <div className="flex flex-col gap-1">
          <p className="text-zinc-500">Share this article</p>
          <div className="flex gap-2 items-center  ">{/*shareable */}</div>
        </div>

        <MarkdownRenderer content={post.content} />
      </div>
    </div>
  );
}
`

module.exports = {
    rootLayout, 
    homePage,
    blogPage, 
    slugPage
}